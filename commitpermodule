#!/usr/bin/python
# -*- coding: utf-8 -*-
# PYTHON_ARGCOMPLETE_OK
import argparse
import argcomplete
import os
import pprint


class CommitPerModule(object):

    """
    This object pretend to get and odoo addons path and aplicate one commit for
    every module.

    It is usefull when apply a gobal change in all the modules via script and
    want to commit the change per module.
    """

    epilog = '\n'.join([
        'Odoo Developer Comunity Tool',
        'Developed by Katherine Zaoral <kathy@vauxoo.com>'
        ' <github.com/zaoral>',
        'Source code at git:vauxoo-dev/gist-vauxoo.',
        ' '
    ])

    description = '\n'.join([
        'Make a commit per module.\n',
        'NOTE: It is usefull when apply a gobal change in all the modules via',
        '      script and want to commit the change per module.',
    ])

    def __init__(self):
        """
        Initialization of the class.
        @return: None
        """
        self.args = self.argument_parser()
        self.path = self.args['path']
        self.msg = self.args['msg']

        if self.args.get('no_confirm', False):
            pass
        else:
            self.confirm_run(self.args)
        return None

    def argument_parser(self):
        """
        This function create the help command line, manage and filter the
        parameters of this script (default values, choices values).
        @return dictionary of the arguments.
        """
        parser = argparse.ArgumentParser(
            prog='commitpermodule',
            formatter_class=argparse.RawTextHelpFormatter,
            description=self.description,
            epilog=self.epilog)

        parser.add_argument(
            '--no-confirm',
            action='store_true',
            help=('Do not ask user for confirmation before run the script.'
                  '\nDefault is True'))

        parser.add_argument(
            '-p', '--path',
            metavar='PATH',
            type=str,
            required=True,
            help='The addons module path were you want to apply the new'
                 '\ncommits.')

        parser.add_argument(
            '-m', '--msg',
            metavar='MESSAGE',
            type=str,
            required=True,
            help='\n'.join([
                'The commit message to use. You can add {module} tag to',
                'reference the module name in the commit. Example:\n',
                '    "[ADD] Move {module} module description from',
                '    the openerp descriptor to a README.md file."',
            ]))

        argcomplete.autocomplete(parser)
        return parser.parse_args().__dict__

    def confirm_run(self, args):
        """
        Manual confirmation before runing the script. Very usefull.
        @param args: dictionary of arguments.
        @return True or exit the program in the confirm is no.
        """
        pprint.pprint('\n... Configuration of Parameters Set')
        for (parameter, value) in args.iteritems():
            pprint.pprint('%s = %s' % (parameter, value))

        question = 'Confirm the run with the above parameters?'
        answer = 'The script parameters were confirmed by the user'
        self.confirmation(question, answer)
        return True

    def confirmation(self, question, answer):
        """
        Manual confirmation for the user.
        @return True or exit the program in the confirmation in negative.
        """
        confirm_flag = False
        while confirm_flag not in ['y', 'n']:
            confirm_flag = raw_input(question + ' [y/n]: ')
            if confirm_flag == 'y':
                pprint.pprint(answer)
            elif confirm_flag == 'n':
                pprint.pprint('The user cancel the operation')
                exit()
            else:
                pprint.pprint('The entry is not valid, please enter y or n.')
        return True

    def run(self):
        """
        run the given command in the command line.
        @return True
        """
        for root, dirnames, filenames in os.walk(self.path):
            dirnames = dirnames
            if '__openerp__.py' in filenames:
                module = os.path.basename(root)
                os.system(
                    'echo "Commit to {module} module"'.format(module=module))
                os.system('cd {path} && git commit . -m "{msg}"'.format(
                    path=root,
                    msg=self.msg.format(module=module)
                ))
        return True


def main():
    obj = CommitPerModule()
    obj.run()
    return True

if __name__ == '__main__':
    main()
